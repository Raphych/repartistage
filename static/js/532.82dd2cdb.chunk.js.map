{"version":3,"file":"static/js/532.82dd2cdb.chunk.js","mappings":"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","sources":["components/datas/ExcelReader.tsx","components/ui/buttons/Button.tsx","components/datas/Hungarian.jsx","components/datas/MatrixMaker.tsx","pages/Home.tsx"],"sourcesContent":["import * as XLSX from 'xlsx';\r\n\r\ninterface ExcelReaderProps {\r\n    data: any[]\r\n    setData: (datas: any[]) => void;\r\n}\r\n\r\nexport default function ExcelReader({ data, setData }: ExcelReaderProps) {\r\n\r\n    function handleFileUpload(event: any) {\r\n        const file = event.target.files[0];\r\n        const reader = new FileReader();\r\n\r\n        reader.onload = (e) => {\r\n            const arrayBuffer = e.target?.result;\r\n            const workbook = XLSX.read(arrayBuffer, { type: 'array' });\r\n            const firstSheetName = workbook.SheetNames[0];\r\n            const worksheet = workbook.Sheets[firstSheetName];\r\n            const jsonData = XLSX.utils.sheet_to_json(worksheet);\r\n            if (jsonData && jsonData.length > 0)\r\n                setData(jsonData);\r\n        };\r\n\r\n        reader.readAsArrayBuffer(file);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <input type=\"file\" accept=\".xlsx, .xls\" onChange={handleFileUpload} />\r\n            <div className='table-container'>\r\n                {data.length > 0 && (\r\n                    <table>\r\n                        <thead>\r\n                            <tr>\r\n                                {Object.keys(data[0]).map((key) => (\r\n                                    <th key={key}>{key}</th>\r\n                                ))}\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {data.slice(0,10).map((row, index) => (\r\n                                <tr key={index}>\r\n                                    {Object.values(row).map((cell: any, i) => (\r\n                                        <td key={i}>{cell}</td>\r\n                                    ))}\r\n                                </tr>\r\n                            ))}\r\n                        </tbody>\r\n                    </table>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};","import { ReactNode } from \"react\";\r\n\r\ninterface ButtonProps {\r\n    children: string | ReactNode;\r\n    onClick?: () => void;\r\n    type?: \"button\" | \"submit\" | \"reset\";\r\n    className?: string;\r\n    disabled?: boolean;\r\n}\r\n\r\nexport default function Button({ onClick, type = \"button\", className = \"\", disabled = false, children = \"\" }: ButtonProps) {\r\n    return (\r\n        <button type={type} onClick={onClick} className={`btn ${className}`} disabled={disabled}>\r\n            {children}\r\n        </button>\r\n    )\r\n}","import { useState } from \"react\";\r\nimport Button from \"../ui/buttons/Button\";\r\nimport hungarian from \"hungarian-on3\";\r\n\r\nexport default function Hungarian({ matrix, array, columns, ids, options }) {\r\n\r\n    const [result, setResult] = useState([]);\r\n\r\n    function handleClick() {\r\n        const res = hungarian(matrix);\r\n        setResult(res)\r\n    }\r\n\r\n    return (\r\n        <>\r\n          <Button onClick={handleClick} type=\"button\" className=\"btn-primary\">Assigner</Button>\r\n          <table>\r\n            <thead>\r\n              <tr>\r\n                <th>#</th>\r\n                <th>ID</th>\r\n                <th>Choice</th>\r\n                <th>Preference</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {result.map(([row, col], index) => (\r\n                <tr key={index}>\r\n                  <td>{index + 1}</td>\r\n                  <td>{ids[row]}</td>\r\n                  <td>{options[col]}</td>\r\n                  <td>{matrix[row][col]}</td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </>\r\n      );\r\n}","import Button from \"../ui/buttons/Button\";\r\n\r\ninterface MatrixMakerProps {\r\n    array: any[];\r\n    setMatrix: (matrix: number[][]) => void;\r\n    columns: { [key: string]: string; };\r\n    setColumns: React.Dispatch<React.SetStateAction<{\r\n        [key: string]: string;\r\n    }>>;\r\n    setIds: React.Dispatch<React.SetStateAction<any[]>>\r\n    setOptions: React.Dispatch<React.SetStateAction<any[]>>\r\n}\r\n\r\nexport default function MatrixMaker({ array, setMatrix, columns, setColumns, setIds, setOptions }: MatrixMakerProps) {\r\n\r\n    function handleColumnRoleChange(columnName: string, role: string) {\r\n        setColumns((prevColumns) => ({\r\n            ...prevColumns,\r\n            [columnName]: role,\r\n        }));\r\n    };\r\n\r\n\r\n    function defineMatrix() {\r\n\r\n\r\n\r\n        const idCol = Object.keys(columns).find((col) => columns[col] === 'id');\r\n        const choiceCol = Object.keys(columns).find((col) => columns[col] === 'choice');\r\n        const preferenceCol = Object.keys(columns).find((col) => columns[col] === 'preference');\r\n\r\n        if (!idCol || !choiceCol || !preferenceCol) {\r\n            alert('Please assign roles to all columns.');\r\n            return;\r\n        }\r\n\r\n        // Get unique IDs and choices\r\n        const uniqueIds = Array.from(new Set(array.map((row) => row[idCol])));\r\n        const uniqueChoices = Array.from(new Set(array.map((row) => row[choiceCol])));\r\n\r\n        // Initialize matrix with zeros\r\n        const matrix = Array(uniqueIds.length)\r\n            .fill(0)\r\n            .map(() => Array(uniqueChoices.length).fill(999999));\r\n\r\n        array.forEach((row) => {\r\n            const idIndex = uniqueIds.indexOf(row[idCol]);\r\n            const choiceIndex = uniqueChoices.indexOf(row[choiceCol]);\r\n            matrix[idIndex][choiceIndex] = parseFloat(row[preferenceCol]);\r\n        })\r\n\r\n        setIds(uniqueIds);\r\n        setOptions(uniqueChoices);\r\n        setMatrix(matrix);\r\n    };\r\n\r\n\r\n    if (!array || array.length === 0) {\r\n        return <div>Upload xlsx file</div>;\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <table>\r\n                <tbody>\r\n\r\n                    {\r\n                        Object.keys(array[0])?.map((col, index) => (\r\n                            <tr key={index}>\r\n                                <td>{col}</td>\r\n                                <td>\r\n                                    <select\r\n                                        name=\"col\"\r\n                                        value={columns[col] || ''}\r\n                                        onChange={(e) => handleColumnRoleChange(col, e.target.value)}\r\n                                    >\r\n                                        <option value={''}></option>\r\n                                        <option value={'id'}>ID</option>\r\n                                        <option value={'choice'}>Choix</option>\r\n                                        <option value={'preference'}>Preference</option>\r\n                                    </select>\r\n                                </td>\r\n                            </tr>\r\n                        ))\r\n                    }\r\n                </tbody>\r\n            </table>\r\n            <Button type=\"button\" onClick={defineMatrix}>Créer la matrice</Button>\r\n        </div>\r\n    )\r\n}","import { useEffect, useState } from \"react\";\r\nimport ExcelReader from \"../components/datas/ExcelReader\";\r\nimport Hungarian from \"../components/datas/Hungarian\";\r\nimport MatrixMaker from \"../components/datas/MatrixMaker\";\r\n\r\nexport default function Home() {\r\n\r\n    const [data, setData] = useState<any[]>([])\r\n    const [ids, setIds] = useState<any[]>([]);\r\n    const [options, setOptions] = useState<any[]>([])\r\n    const [columns, setColumns] = useState<{ [key: string]: string; }>({});\r\n    const [matrix, setMatrix] = useState<number[][]>([])\r\n\r\n    console.log(matrix)\r\n\r\n    return (\r\n        <div>\r\n            <ExcelReader data={data} setData={setData} />\r\n            <MatrixMaker array={data} setMatrix={setMatrix} columns={columns} setColumns={setColumns} setIds={setIds} setOptions={setOptions} />\r\n            <Hungarian matrix={matrix} array={data} columns={columns} ids={ids} options={options} />\r\n        </div>\r\n    )\r\n}"],"names":["ExcelReader","_ref","data","setData","_jsxs","children","_jsx","type","accept","onChange","event","file","target","files","reader","FileReader","onload","e","_e$target","arrayBuffer","result","workbook","XLSX","firstSheetName","SheetNames","worksheet","Sheets","jsonData","sheet_to_json","length","readAsArrayBuffer","className","Object","keys","map","key","slice","row","index","values","cell","i","Button","onClick","disabled","concat","Hungarian","matrix","array","columns","ids","options","setResult","useState","_Fragment","res","hungarian","_ref2","col","MatrixMaker","_Object$keys","setMatrix","setColumns","setIds","setOptions","name","value","handleColumnRoleChange","columnName","role","prevColumns","idCol","find","choiceCol","preferenceCol","alert","uniqueIds","Array","from","Set","uniqueChoices","fill","forEach","idIndex","indexOf","choiceIndex","parseFloat","Home","console","log"],"sourceRoot":""}